#!/bin/sh
##
## TrueCrypt mounting and dismounting script.
##
VERSION="2.4"
##
## Author: Philipp Meisberger <team@pm-codeworks.de> 
## Depends: truecrypt zenity
##
## Usage: PM [Action] [Options] 
## Action: --mount | --dismount | --auto | --version
## Options (optional): --debug | --silent | --non-interactive
## 
## Action
## --mount              Mounts a decrypted TrueCrypt volume. 
## --dismount           Dismounts a Truecrypt volume. 
## --auto               Either mounts a Truecrypt volume if it is dismounted or dismounts a TrueCrypt volume if it is mounted.
## --version            Prints version and exits.
##
## Options
## --debug              Print debug messages. 
## --silent             Suppress errors if keyfile or token device was not found.
## --non-interactive    Suppress GTK+ messages.
##

## --- START OF CONFIGURATION ---

# ID for device being mounted
MOUNTDEVICE=/dev/disk/by-id/usb-WDC_WD64_00BEVT-22A0RT0_D1A201447088-0:0-part3

# Path to directory where volume shall be mounted
MOUNTPATH=/media/Safe

# ID for device containing keyfile
TOKENDEVICE=/dev/disk/by-id/usb-Multiple_Card_Reader_058F63666433-0:0-part1

# Path to directory where token shall be mounted
TOKENPATH=/media/SDCard

# Path to keyfile used for TrueCrypt volume decryption
KEYFILE=$TOKENPATH/Key.orig

## --- END OF CONFIGURATION ---


##
# Shows GTK error message or console text output.
# 
# @param string
#             Text of message that will be displayed.
# @return void
##
Error() {

    if ( test $INTERACTIVE = 0 ); then
        zenity --error --title="$0" --text="$1" 
    else
        echo "[\033[31mError\033[0m] $1"
    fi
}

##
# Shows GTK information message or console text output.
# 
# @param string
#             Text of message that will be displayed.
# @return void
##
Info() {

    if ( test $INTERACTIVE = 0 ); then
        zenity --info --title="$0" --text="$1"
    else
        echo "[\033[32mInfo\033[0m] $1"
    fi
}

##
# Prints debug messages to console.
#
# @param string 
# @return void
##
Debug() {

    if ( test $DEBUG = 0 ); then
        echo "[Debug] $1"
    fi
}

##
# Tests if any volume is mounted.
# 
# @param string 
#             Path to directory.
# @return integer 
#             Returns 0 if mounted. 
##
Mounted() {
  
    if ( mount -l | grep "$1" > /dev/null ); then
        return 0 
    else
        return 1 
    fi
}

##
# Mounts a decrypted TrueCrypt volume.
# 
# @return integer
#             Returns 0 if no errors occurred. 
##
Mount() {
    
    # Token exists...
    if ( test -b $TOKENDEVICE ); then
        Debug "Token exists!"

        # ...and is not mounted? 
        if ( ! Mounted $TOKENPATH ); then
            # mount it first!
            Debug "Mounting token..."            
            MOUNTINFO=$(mount -v $TOKENDEVICE)
            
            if ( test $? = 0 ); then
                sleep 2
                Debug "$MOUNTINFO"
                Debug "Token mounted successfully!"
            else
                Debug "Error while mounting token!"
                return 1
            fi
        else
            Debug "Token mounted!"
        fi
    else
        if ( test $SILENT = 1 ); then
            Error "Token does not exist!"
        else
            Debug "Token does not exist: "
        fi
        return 1
    fi
    
    # Keyfile does not exist?
    if ( ! test -f $KEYFILE ); then

        # Check for silent mode
        if ( test $SILENT = 1 ); then
            Error "Keyfile not found!"
            return 1
        else
            Debug "Keyfile not found: $KEYFILE"
            return 1
        fi
    fi

    # Device exists?
    if ( test -b $MOUNTDEVICE ); then    
        echo "Mounting..."
        Debug "Device:  $MOUNTDEVICE"
        Debug "Path:    $MOUNTPATH"
        Debug "Keyfile: $KEYFILE"
        truecrypt --text --non-interactive $MOUNTDEVICE $MOUNTPATH --keyfiles=$KEYFILE
        RESULT=$?
        
        if ( test $RESULT != 0 ); then
            Debug "Error: $RESULT"
            Error "Error while mounting!"
            return $RESULT
        else 
            Info "Successfully mounted!"
            return 0
        fi
    else
        Error "Mounting device does not exist!"
        Debug "$MOUNTDEVICE"
        return 1
    fi
}
  
##
# Dismounts a TrueCrypt volume.
# 
# @return integer
#             Returns 0 if no errors occurred. 
##
Dismount() {

    # Device does not exist?
    if ( ! test -b $MOUNTDEVICE ); then
        Error "Dismounting device does not exist!"
        Debug "$MOUNTDEVICE"
        return 1
    fi
    
    echo "Dismounting..."
    Debug "Device:  $MOUNTDEVICE"
    Debug "Path:    $MOUNTPATH"
    truecrypt --text --non-interactive --dismount $MOUNTDEVICE
    RESULT=$?

    if ( test $RESULT != 0 ); then
        Debug "Error: $RESULT"
        Error "Error while dismounting!"        
        return $RESULT
    else 
        Info "Successfully dismounted!"
        #UMOUNTINFO=$(umount -v $TOKENDEVICE)
        
        #if ( test $? = 0 ); then
        #    sleep 2
        #    Debug "$UMOUNTINFO"
        #    Debug "Token dismounted successfully!"
        #else
        #    Debug "Error while dismounting token!"
        #fi
        return 0
    fi
}

# Main:
if ( test "$2" = "--debug" ); then
    DEBUG=0
    INTERACTIVE=1
    SILENT=1
else
    DEBUG=1

    if ( test "$2" = "--non-interactive" || test "$3" = "--non-interactive" ); then
        INTERACTIVE=1
    else
        INTERACTIVE=0
    fi

    if ( test "$2" = "--silent" || test "$3" = "--silent" ); then
        SILENT=0   
    else
        SILENT=1
    fi
fi


case "$1" in

    --dismount) 
        # Device mounted?
        if ( Mounted $MOUNTPATH ); then
            Dismount
        else
            Error "Device already dismounted!"
            Debug "Device:  $MOUNTDEVICE"
        fi
    ;;
    
    --mount)
        # Device dismounted?
        if ( ! Mounted $MOUNTPATH ); then
            Mount
        else
            Error "Device already mounted!"
            Debug "Device:  $MOUNTDEVICE"
            Debug "Path:    $MOUNTPATH" 
        fi        
    ;;
        
    --auto)
        if ( Mounted $MOUNTPATH ); then
            Dismount
        else
            Mount
        fi
    ;;

    --version)
        echo "$0 $VERSION"
    ;;
        
    *)
        echo "TrueCrypt mounting and dismounting script."
        echo ""    
        echo "Usage: $0 [Action] [Options]"
        echo "Action: --mount | --dismount | --auto | --version"
        echo "Options (optional): --debug | --silent | --non-interactive"
        echo ""
        echo "Action"
        echo "--mount            Mounts a decrypted TrueCrypt volume."
        echo "--dismount         Dismounts a Truecrypt volume."
        echo "--auto             Either mounts a Truecrypt volume if it is dismounted or dismounts a TrueCrypt volume if it is mounted."
        echo "--version          Prints version and exits."
        echo ""
        echo "Options"
        echo "--debug            Print debug messages. NOTE: If set, other options will be ignored!"
        echo "--silent           Suppress errors if keyfile or token device was not found."
        echo "--non-interactive  Suppress GTK+ messages."
        echo ""
    ;;
esac
    
exit 0
